#Shansharov Nurgali lab 9
#Zhapar Azat
#1 Функциональная функция:
# def sort_name(cities_list):
#     sorted_name = sorted(cities_list)
#     return sorted_name

# # Example usage:
# my_names = ["Miras", "Nurgali", "Eldos", "Serik", "Aibek"]
# sorted_name = sort_name(my_names)
# print(sorted_name) 

# Нефункц
# k = 0
# def increment_k():
#     global k
#     k += 1

# print(k) 
# increment_k()
# print(k) 
# increment_k()
# print(k) 



#2 ------------------------
# def process_list(lst):
#     sum_of_list = sum(lst)
#     max_value = max(lst)
#     even_indices = {i: lst[i] for i in range(len(lst)) if lst[i] % 2 == 0}
#     return (sum_of_list, max_value, even_indices)

# my_list = [11, 6, 7, 8, 27, 5, 12]
# result_tuple = process_list(my_list)
# print(result_tuple)


# 3 -------------------
# numbers = [1, 2, 3, 4, 5]
# squares = map(lambda x: x**2, numbers)
# print(list(squares))  # [1, 4, 9, 16, 25]

# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# odd_numbers = filter(lambda x: x % 2 != 0, numbers)
# print(list(odd_numbers))  # [1, 3, 5, 7, 9]

# from functools import reduce

# numbers = [1, 2, 3, 4, 5]
# sum_of_numbers = reduce(lambda x, y: x + y, numbers)
# print(sum_of_numbers)  


#4--------------------
# def calculate_delivery_cost(street_name, order_price):
#     """Рассчитывает стоимость доставки заказа в зависимости от улицы и стоимости товара"""
#     if street_name == "квадрат Аль-Фараби-Саина-Ташентского-Достык":
#         if order_price < 10000:
#             return 500
#         else:
#             return 0
#     else:
#         if order_price < 10000:
#             return 1000
#         else:
#             return order_price * 0.01

# delivery_cost = calculate_delivery_cost("ул. Абая", 15000)
# print(delivery_cost) 


# 5-----------------
# def compose_functions(f, g):
#     """Возвращает новую функцию h(x), которая является композицией функций f и g"""
#     def h(x):
#         """Композиция функций f и g"""
#         return f(g(x))
#     return h

# def f(x):
#     """Возвращает квадрат числа x"""
#     return x**2

# def g(x):
#     """Возвращает число x плюс 1"""
#     return x + 1

# h = compose_functions(f, g)
# print(h(2))
